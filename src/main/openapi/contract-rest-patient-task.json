{
  "openapi": "3.0.2",
  "info": {
    "title": "Patient Task Service REST API - OpenAPI 3.0",
    "description": "REST API contract for the patient task service. Includes a single endpoint for getting patient's tasks.\n\nSome useful links:\n- [Task Service Repository](https://github.com/projectronin/prodeng-patient-task)",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "bhefley@projectronin.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  },
  "servers": [
    {
      "url": "/api/v1"
    }
  ],
  "tags": [
    {
      "name": "Task",
      "description": "Operations about tasks"
    },
    {
      "name": "Questionnaire",
      "description": "Operations about tasks with type Questionnaires"
    }
  ],
  "paths": {
    "/tenants/{tenantId}/patients/{patientId}/tasks": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Get all tasks for patient",
        "description": "Get all tasks for patient by tenantId and patientId",
        "operationId": "getTasks",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the tenant for the current tenant",
            "example": "1xrekpx5"
          },
          {
            "in": "path",
            "name": "patientId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The UDP ID of the current patient",
            "example": "018c275e-c378-7c4a-a112-157e4c0e4cb5"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            },
            "description": "Paging param to control the number of tasks to get back",
            "example": 20,
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "description": "Zero-indexed page number",
            "example": 0,
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskListBody"
                },
                "examples": {
                  "FetchPatientQuestionnairesResponse": {
                    "$ref": "#/components/examples/TaskListResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Error"
                      }
                    }
                  }
                },
                "examples": {
                  "BadRequestExample": {
                    "$ref": "#/components/examples/BadRequestException"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Error"
                      }
                    }
                  }
                },
                "examples": {
                  "ForbiddenExample": {
                    "$ref": "#/components/examples/ForbiddenException"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tenants/{tenantId}/patients/{patientId}/active-questionnaires": {
      "get": {
        "tags": [
          "Questionnaire"
        ],
        "summary": "Get active questionnaires for patient",
        "description": "Get questionnaires for patient by tenantId and patientId",
        "operationId": "getActiveQuestionnaires",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "tenantId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the tenant for the current tenant",
            "example": "1xrekpx5"
          },
          {
            "in": "path",
            "name": "patientId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The UDP ID of the current patient",
            "example": "018c275e-c378-7c4a-a112-157e4c0e4cb5"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            },
            "description": "Paging param to control the number of tasks to get back",
            "example": 20,
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "description": "Zero-indexed page number",
            "example": 0,
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuestionnaireListBody"
                },
                "examples": {
                  "FetchPatientQuestionnairesResponse": {
                    "$ref": "#/components/examples/QuestionnaireListResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Error"
                      }
                    }
                  }
                },
                "examples": {
                  "BadRequestExample": {
                    "$ref": "#/components/examples/BadRequestException"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Error"
                      }
                    }
                  }
                },
                "examples": {
                  "ForbiddenExample": {
                    "$ref": "#/components/examples/ForbiddenException"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Error": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID for this error"
          },
          "source": {
            "type": "string",
            "description": "Service where the error originated"
          },
          "httpStatus": {
            "type": "string",
            "enum": [
              "NOT_FOUND",
              "FORBIDDEN",
              "BAD_REQUEST"
            ],
            "description": "String representation of HTTP status"
          },
          "timestamp": {
            "type": "string"
          },
          "status": {
            "type": "integer",
            "description": "HTTP status"
          },
          "error": {
            "type": "string",
            "description": "Human readable form of the exception or httpStatus. This MUST be included"
          },
          "exception": {
            "type": "string",
            "description": "The exception class"
          },
          "message": {
            "type": "string",
            "description": "Human readable message"
          },
          "detail": {
            "type": "string",
            "description": "A human readable message that describes the specific failure"
          }
        }
      },
      "Paging": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "description": "Zero-indexed page. Value is set in the request query params"
          },
          "limit": {
            "type": "integer",
            "description": "Max limit of the number of records to get back in response. Value is set in the request query params"
          }
        }
      },
      "QuestionnaireListBody": {
        "type": "object",
        "properties": {
          "paging": {
              "$ref": "#/components/schemas/Paging"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Questionnaire"
            }
          }
        },
        "required": [
          "data"
        ]
      },
      "TaskListBody": {
        "type": "object",
        "properties": {
          "paging": {
            "$ref": "#/components/schemas/Paging"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Task"
            }
          }
        },
        "required": [
          "data"
        ]
      },
      "Task": {
        "type": "object",
        "properties": {
          "patientId": {
            "type": "string",
            "description": "Patient UDP ID"
          },
          "tenantId": {
            "type": "string",
            "description": "The tenant ID"
          },
          "assignerId": {
            "type": "string",
            "description": "The reference ID for who assigned the task"
          },
          "type": {
            "type": "string",
            "description": "The type of task"
          },
          "active": {
            "type": "boolean",
            "description": "Whether the task is active"
          },
          "referenceId": {
            "type": "string",
            "description": "The reference ID to external components of the task"
          },
          "repeatable": {
            "type": "boolean",
            "description": "Whether the task can be immediately repeated once completed"
          },
          "timing": {
            "$ref": "#/components/schemas/Timing"
          },
          "lastCompletedAt": {
            "type": "string",
            "description": "The date that the questionnaire was last completed."
          }
        },
        "required": [
          "patientId",
          "tenantId",
          "assignerId",
          "type",
          "active"
        ]
      },
      "Timing": {
        "type": "object",
        "description": "The repeat details of the task for the given patient.",
        "properties": {
          "frequency": {
            "type": "integer",
            "description": "The frequency of the task, i.e. how many times the task can be completed per reset period"
          },
          "remainingFrequency": {
            "type": "integer",
            "description": "The remaining number of times this task can be completed before the next reset"
          },
          "period": {
            "type": "integer",
            "description": "The period of the task in period units"
          },
          "periodUnit": {
            "type": "string",
            "description": "The time unit of the period"
          },
          "startDate": {
            "type": "string",
            "description": "The start time of the task"
          },
          "endDate": {
            "type": "string",
            "description": "The end time of the task"
          },
          "lastResetAt": {
            "type": "string",
            "description": "The date that the task timing was last reset."
          }
        }
      },
      "Questionnaire": {
        "type": "object",
        "properties": {
          "questionnaireId": {
            "type": "string",
            "description": "The id of the questionnaire that will be used to lookup in questionnaire service."
          },
          "assignerId": {
            "type": "string",
            "description": "The reference ID for who assigned the task"
          },
          "available": {
            "type": "boolean",
            "description": "Whether the questionnaire is still able to be completed."
          },
          "repeatable": {
            "type": "boolean",
            "description": "Whether the task can be immediately repeated once completed"
          },
          "timing": {
            "$ref": "#/components/schemas/Timing"
          },
          "lastCompletedDate": {
            "type": "string",
            "description": "The date that the questionnaire was last completed."
          }
        },
        "required": [
          "questionnaireId",
          "assignerId",
          "available"
        ]
      }
    },
    "examples": {
      "QuestionnaireListResponse": {
        "summary": "Questionnaire list response example",
        "value": {
          "paging": {
            "limit": 10,
            "page": 0
          },
          "data": [
            {
              "questionnaireId": "1",
              "assignerId": "80704e6a-9541-4468-ad75-1c0bd50ca310",
              "available": true,
              "repeatable": true,
              "lastCompletedDate": "2020-01-01T00:00:00Z"
            },
            {
              "questionnaireId": "2",
              "assignerId": "80704e6a-9541-4468-ad75-1c0bd50ca310",
              "available": false,
              "timing": {
                "frequency": 1,
                "remainingFrequency": 0,
                "period": 1,
                "periodUnit": "w"
              },
              "lastCompletedDate": "2020-01-01T00:00:00Z"
            }
          ]
        }
      },
      "TaskListResponse": {
        "summary": "Task list response example",
        "value": {
          "paging": {
            "limit": 10,
            "page": 0
          },
          "data": [
            {
              "tenantId": "ronin",
              "patientId": "f576ca9c-dbd1-4af0-ac53-b868948a3d7a",
              "assignerId": "80704e6a-9541-4468-ad75-1c0bd50ca310",
              "type": "QUESTIONNAIRE",
              "referenceId": "1",
              "active": true,
              "repeatable": true,
              "timing": {
                "start": "2020-01-01T00:00:00.000Z",
                "end": "2020-01-27T00:00:00.000Z"
              }
            },
            {
              "tenantId": "ronin",
              "patientId": "f576ca9c-dbd1-4af0-ac53-b868948a3d7a",
              "assignerId": "80704e6a-9541-4468-ad75-1c0bd50ca310",
              "type": "QUESTIONNAIRE",
              "referenceId": "2",
              "active": true,
              "timing": {
                "frequency": 1,
                "period": 1,
                "periodUnit": "w"
              }
            }
          ]
        }
      },
      "BadRequestException": {
        "summary": "Bad Request",
        "value": {
          "errors": [
            {
              "id": "8b03fbee-7e96-4491-9621-73ca0213c27d",
              "source": "questionnaire-service",
              "httpStatus": "BAD_REQUEST",
              "timestamp": "2023-19-25T06:53:17.62Z",
              "status": 400,
              "error": "Bad request",
              "exception": "com.projectronin.product.common.exception.BadRequestException",
              "message": "Could not parse request body",
              "detail": "Must include the \"type\" property"
            }
          ]
        }
      },
      "ForbiddenException": {
        "summary": "Forbidden",
        "value": {
          "errors": [
            {
              "id": "8b03fbee-7e96-4491-9621-73ca0213c27d",
              "source": "questionnaire-service",
              "httpStatus": "FORBIDDEN",
              "status": 403,
              "error": "Forbidden",
              "exception": "com.projectronin.produce.common.exception.ForbiddenException",
              "message": "Forbidden",
              "detail": "No"
            }
          ]
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
